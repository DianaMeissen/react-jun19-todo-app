{"version":3,"sources":["ToDoItem.js","Header.js","Footer.js","App.js","index.js"],"names":["ToDoItem","props","react_default","a","createElement","className","style","display","id","type","htmlFor","items","map","item","key","isCompleted","checked","onClick","toggleItem","text","deleteToDoItem","Header","onSubmit","event","newItem","uuid","target","toDoItem","value","addNewItem","autofocus","placeholder","autoFocus","name","Footer","activeItemsLength","href","selectedFilter","setSelectedFiler","App","state","toDoItems","saveToLocalSetState","_this","setState","Object","objectSpread","saveDataToLocalStorage","concat","toConsumableArray","toDoArray","index","findIndex","filter","toDo","generateFilteredDataSouce","_this$state","res","localStorage","getItem","this","JSON","parse","setItem","stringify","visibleItems","src_Header","src_ToDoItem","src_Footer","length","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7c3cac84.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ToDoItem = props => {\n  return (\n    <section className=\"main\" style={{ display: \"block\" }}>\n      <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {props.items.map(item => {\n          return (\n            <li key={item.id} className={item.isCompleted && \"completed\"}>\n              <div className=\"view\">\n                <input\n                  className=\"toggle\"\n                  type=\"checkbox\"\n                  checked={item.isCompleted}\n                  onClick={() => {\n                    props.toggleItem(item.id);\n                  }}\n                />\n                <label>{item.text}</label>\n                <button\n                  className=\"destroy\"\n                  onClick={() => props.deleteToDoItem(item.id)}\n                />\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default ToDoItem;\n","import React from \"react\";\nimport uuid from \"uuid/v1\";\n\nconst Header = props => {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form\n        onSubmit={event => {\n          const newItem = {\n            id: uuid(),\n            text: event.target.toDoItem.value,\n            isCompleted: false\n          };\n          props.addNewItem(newItem);\n          event.target.toDoItem.value = \"\";\n        }}\n      >\n        <input\n          autofocus=\"true\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          autoFocus=\"\"\n          name=\"toDoItem\"\n        />\n      </form>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react'\n\nconst Footer = (props) => {\n    return (\n        <footer className=\"footer\" style={{ display: 'block' }}>\n            <span className=\"todo-count\">{props.activeItemsLength} items left</span>\n            <ul className=\"filters\">\n                <li>\n                    <a href=\"#/\"\n                        className={props.selectedFilter === \"all\" && \"selected\"}\n                        onClick={() => {\n                            props.setSelectedFiler(\"all\")\n                        }}>All</a>\n                </li>\n                <li>\n                    <a href=\"#/active\"\n                        className={props.selectedFilter === \"active\" && \"selected\"}\n                        onClick={() => {\n                            props.setSelectedFiler(\"active\")\n                        }}>Active</a>\n                </li>\n                <li>\n                    <a href=\"#/completed\"\n                        className={props.selectedFilter === \"completed\" && \"selected\"}\n                        onClick={() => {\n                            props.setSelectedFiler(\"completed\")\n                        }}>Completed</a>\n                </li>\n            </ul>\n            <button className=\"clear-completed\" style={{ display: 'block' }}></button>\n        </footer>\n    )\n}\n\nexport default Footer ","import React from \"react\";\n\nimport ToDoItem from \"./ToDoItem\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nclass App extends React.Component {\n  state = {\n    toDoItems: [],\n    selectedFilter: \"all\"\n  };\n\n  saveToLocalSetState = state => {\n    this.setState({ ...state }, () => {\n      this.saveDataToLocalStorage();\n    });\n  };\n\n  componentDidMount() {\n    if (localStorage.getItem(\"toDoItems\") !== null) {\n      this.saveToLocalSetState({\n        toDoItems: JSON.parse(localStorage.getItem(\"toDoItems\")),\n        selectedFilter: localStorage.getItem(\"selectedFilter\")\n      });\n    }\n  }\n\n  saveDataToLocalStorage() {\n    localStorage.setItem(\"toDoItems\", JSON.stringify(this.state.toDoItems));\n    localStorage.setItem(\"selectedFilter\", this.state.selectedFilter);\n  }\n\n  addNewItem = newItem => {\n    this.saveToLocalSetState({\n      toDoItems: [...this.state.toDoItems, newItem]\n    });\n  };\n\n  toggleItem = id => {\n    const toDoArray = [...this.state.toDoItems];\n    const index = toDoArray.findIndex(item => item.id === id);\n    toDoArray[index].isCompleted = !toDoArray[index].isCompleted;\n    this.saveToLocalSetState({\n      toDoItems: toDoArray\n    });\n  };\n\n  deleteToDoItem = id => {\n    const toDoItems = [...this.state.toDoItems].filter(toDo => toDo.id !== id);\n    this.saveToLocalSetState({\n      toDoItems\n    });\n  };\n\n  setSelectedFiler = selectedFilter => {\n    this.saveToLocalSetState({\n      selectedFilter\n    });\n  };\n\n  generateFilteredDataSouce = () => {\n    const { selectedFilter, toDoItems } = this.state;\n    let res = [];\n    switch (selectedFilter) {\n      default:\n        res = toDoItems;\n        break;\n      case \"active\":\n        res = toDoItems.filter(item => !item.isCompleted);\n        break;\n      case \"completed\":\n        res = toDoItems.filter(item => item.isCompleted);\n        break;\n    }\n\n    return res;\n  };\n\n  render() {\n    let visibleItems = this.generateFilteredDataSouce();\n\n    return (\n      <section className=\"todoapp\">\n        <Header addNewItem={this.addNewItem} />\n        <ToDoItem\n          toggleItem={this.toggleItem}\n          deleteToDoItem={this.deleteToDoItem}\n          items={visibleItems}\n        />\n        <Footer\n          activeItemsLength={\n            this.state.toDoItems.filter(item => item.isCompleted === false)\n              .length\n          }\n          setSelectedFiler={this.setSelectedFiler}\n          selectedFilter={this.state.selectedFilter}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}