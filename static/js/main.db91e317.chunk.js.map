{"version":3,"sources":["ToDoItem.js","Header.js","Footer.js","App.js","index.js"],"names":["ToDoItem","props","react_default","a","createElement","className","style","display","id","type","htmlFor","items","map","item","isCompleted","checked","onClick","replaceItemWithChangedState","text","deleteToDoItem","Header","placeholder","autoFocus","onKeyDown","event","key","newItem","target","value","updateToDoItems","Footer","activeItemsLength","href","selectedFilter","setSelectedFiler","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","toDoItems","concat","toConsumableArray","state","itemToReplace","toDoArray","index","indexOf","splice","localStorage","getItem","JSON","parse","setItem","stringify","visibleItems","filter","length","saveDataToLocalStorage","src_Header","src_ToDoItem","src_Footer","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.db91e317.chunk.js","sourcesContent":["import React from 'react'\n\nconst ToDoItem = (props) => {\n    return (\n        <section className=\"main\" style={{ display: 'block' }}>\n            <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <ul className=\"todo-list\">\n                {props.items.map(item => {\n                    return (\n                        <li className={(item.isCompleted === true) && \"completed\"}>\n                            <div className=\"view\">\n                                <input className=\"toggle\" type=\"checkbox\" checked={item.isCompleted} onClick={() => {\n                                    props.replaceItemWithChangedState(item)\n                                }} />\n                                <label>{item.text}</label>\n                                <button className=\"destroy\" onClick={() => props.deleteToDoItem(item)}></button>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </section >\n    )\n}\n\nexport default ToDoItem","import React from 'react'\n\nconst Header = (props) => {\n    return (\n        <header className=\"header\">\n            <h1>todos</h1>\n\n            <input\n                className=\"new-todo\"\n                placeholder=\"What needs to be done?\"\n                autoFocus=\"\"\n                onKeyDown={(event) => {\n                    if (event.key === 'Enter') {\n                        const newItem = { 'text': event.target.value, 'isCompleted': false };\n                        props.updateToDoItems(newItem);\n                        event.target.value = '';\n                    }\n                }}\n            />\n        </header>\n    )\n}\n\nexport default Header","import React from 'react'\n\nconst Footer = (props) => {\n    return (\n        <footer className=\"footer\" style={{ display: 'block' }}>\n            <span className=\"todo-count\">{props.activeItemsLength} items left</span>\n            <ul className=\"filters\">\n                <li>\n                    <a href=\"#/\"\n                        className={props.selectedFilter === \"all\" && \"selected\"}\n                        onClick={() => {\n                            props.setSelectedFiler(\"all\")\n                        }}>All</a>\n                </li>\n                <li>\n                    <a href=\"#/active\"\n                        className={props.selectedFilter === \"active\" && \"selected\"}\n                        onClick={() => {\n                            props.setSelectedFiler(\"active\")\n                        }}>Active</a>\n                </li>\n                <li>\n                    <a href=\"#/completed\"\n                        className={props.selectedFilter === \"completed\" && \"selected\"}\n                        onClick={() => {\n                            props.setSelectedFiler(\"completed\")\n                        }}>Completed</a>\n                </li>\n            </ul>\n            <button className=\"clear-completed\" style={{ display: 'block' }}></button>\n        </footer>\n    )\n}\n\nexport default Footer ","import React from 'react';\n\nimport ToDoItem from './ToDoItem'\nimport Header from './Header'\nimport Footer from './Footer'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toDoItems: [],\n      selectedFilter: \"all\"\n    }\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"toDoItems\") !== null) {\n      this.setState({\n        toDoItems: JSON.parse(localStorage.getItem(\"toDoItems\")),\n        selectedFilter: JSON.parse(localStorage.getItem(\"selectedFilter\"))\n      })\n    }\n  }\n\n  saveDataToLocalStorage() {\n    localStorage.setItem('toDoItems', JSON.stringify(this.state.toDoItems))\n    localStorage.setItem('selectedFilter', JSON.stringify(this.state.selectedFilter))\n  }\n\n  updateToDoItems = (newItem) => {\n    this.setState({\n      toDoItems: [...this.state.toDoItems, newItem],\n    })\n  }\n\n  replaceItemWithChangedState = (itemToReplace) => {\n    const toDoArray = [...this.state.toDoItems];\n    const index = toDoArray.indexOf(itemToReplace);\n    itemToReplace.isCompleted = !itemToReplace.isCompleted;\n    toDoArray[index] = itemToReplace;\n    this.setState({\n      toDoItems: toDoArray\n    })\n  }\n\n  deleteToDoItem = (item) => {\n    const toDoArray = [...this.state.toDoItems];\n    toDoArray.splice(toDoArray.indexOf(item), 1);\n    this.setState({\n      toDoItems: toDoArray,\n    })\n  }\n\n  setSelectedFiler = (value) => {\n    this.setState({\n      selectedFilter: value\n    })\n  }\n\n  render() {\n    let visibleItems;\n    if (this.state.selectedFilter === \"all\") {\n      visibleItems = this.state.toDoItems\n    } else if (this.state.selectedFilter === \"active\") {\n      visibleItems = this.state.toDoItems.filter(item => item.isCompleted === false)\n    } else {\n      visibleItems = this.state.toDoItems.filter(item => item.isCompleted === true)\n    }\n\n    this.state.toDoItems.length > 0 && this.saveDataToLocalStorage();\n    return (\n      <section className=\"todoapp\" >\n        <Header\n          updateToDoItems={this.updateToDoItems} />\n        <ToDoItem\n          replaceItemWithChangedState={this.replaceItemWithChangedState}\n          deleteToDoItem={this.deleteToDoItem}\n          items={visibleItems} />\n        <Footer\n          activeItemsLength={this.state.toDoItems.filter(item => item.isCompleted === false).length}\n          setSelectedFiler={this.setSelectedFiler}\n          selectedFilter={this.state.selectedFilter} />\n      </section>\n    )\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}